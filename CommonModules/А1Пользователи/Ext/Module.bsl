Функция Текущий(Знач ПовтИсп = Истина) Экспорт
	#Если Клиент Тогда
		ПовтИсп = Истина;
	#КонецЕсли
	Если ПовтИсп Тогда
		Возврат А1Э_ПовторноеИспользование.РезультатФункцииСервер(ИмяМодуля() + ".Текущий", Ложь); 
	КонецЕсли;
	#Если НЕ Клиент Тогда
		УстановитьПривилегированныйРежим(Истина);
		Возврат Справочники.Пользователи.НайтиПоРеквизиту("А1Пользователи_ИдентификаторПользователяИБ", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	#КонецЕсли
КонецФункции

#Если НЕ Клиент Тогда
	
	// Получает объект пользователя информационной базы.
	//
	// Параметры:
	//  Идентификатор - СправочникСсылка.Пользователи,УникальныйИдентификатор - значение, по которому выполняется поиск.
	// 
	// Возвращаемое значение:
	//   - ПользовательИнформационнойБазы,Неопределено
	//
	Функция ПользовательИБ(Знач Идентификатор) Экспорт
		Если ТипЗнч(Идентификатор) = Тип("СправочникСсылка.Пользователи") Тогда
			ИдентификаторПользователяИБ = Идентификатор.А1Пользователи_ИдентификаторПользователяИБ;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
			ИдентификаторПользователяИБ = Идентификатор;
		Иначе
			А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", ИмяМодуля() + ".ПользовательИБ", Идентификатор, "УникальныйИдентификатор,СправочникСсылка.Пользователи");
		КонецЕсли;
		Возврат ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ); 	
	КонецФункции
	
#КонецЕсли

#Область Механизм

Функция НастройкиМеханизма() Экспорт
	Настройки = А1Э_Механизмы.НовыйНастройкиМеханизма();
	
	Настройки.Обработчики.Вставить("ПередЗаписью", Истина);
	Настройки.Обработчики.Вставить("ФормаЭлементаПриСозданииНаСервере", Истина);
	Настройки.Обработчики.Вставить("ФормаПриЗаписиНаСервере", Истина);
	Настройки.Обработчики.Вставить("ПриНачалеРаботыСистемы", Истина);
	
	Возврат Настройки;
КонецФункции  

#Если НЕ Клиент Тогда
	
	Функция ПередЗаписью(Объект, Отказ) Экспорт 
		Если НЕ ЗначениеЗаполнено(Объект.А1Пользователи_ИмяДляВхода) Тогда
			Объект.А1Пользователи_ИмяДляВхода = ИмяДляВходаПоУмолчанию(Объект.Наименование); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.А1Пользователи_ИдентификаторПользователяИБ) Тогда
			Если Объект.ПометкаУдаления Тогда
				ПользовательИБ = Неопределено;
			Иначе
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Объект.А1Пользователи_ИмяДляВхода);
				Если ПользовательИБ = Неопределено Тогда
					ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПользовательИБ = ПользовательИБ(Объект.А1Пользователи_ИдентификаторПользователяИБ);	
		КонецЕсли;
		Если Объект.ПометкаУдаления Тогда
			Если ПользовательИБ <> Неопределено Тогда
				ПользовательИБ.Удалить();
			КонецЕсли;
		Иначе
			ПользовательИБ.Имя = Объект.А1Пользователи_ИмяДляВхода;
			ПользовательИБ.ПолноеИмя = Объект.Наименование;
			ПользовательИБ.Записать();
			Объект.А1Пользователи_ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
		КонецЕсли;
	КонецФункции
	
	Функция ФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
		МассивОписаний = Новый Массив;
		А1Э_Формы.ДобавитьОписаниеПоляОбъекта(МассивОписаний, "Наименование", , , , А1Э_Структуры.Создать(
		"ОкончаниеВводаТекста", ИмяМодуля() + ".НаименованиеОкончаниеВводаТекста",
		));
		А1Э_Формы.ДобавитьОписаниеПоляОбъекта(МассивОписаний, "А1Пользователи_ИмяДляВхода");
		А1Э_Формы.ДобавитьОписаниеПоляОбъекта(МассивОписаний, "А1Пользователи_ТребоватьИзменениеПароляПриВходеВСистему");
		А1Э_Формы.ДобавитьОписаниеВертикальнойГруппы(МассивОписаний, "ГруппаСменаПароля", "Смена пароля");
		А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, "Пароль", "Строка", , "Пароль", "ГруппаСменаПароля", , А1Э_Структуры.Создать(
		"РежимПароля", Истина,
		));
		А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, "ПодтверждениеПароля", "Строка", , "Подтверждение пароля", "ГруппаСменаПароля", , А1Э_Структуры.Создать(
		"РежимПароля", Истина,
		));
		А1Э_Формы.ДобавитьОписаниеГоризонтальнойГруппы(МассивОписаний, "ГруппаКнопкиСменаПароля", , "ГруппаСменаПароля");
		А1Э_Формы.ДобавитьОписаниеКомандыИКнопки2(МассивОписаний, "УстановитьПароль", ИмяМодуля() + ".УстановитьПароль:НаСервере", "Установить пароль", "ГруппаКнопкиСменаПароля");
		А1Э_Формы.ДобавитьОписаниеКомандыИКнопки2(МассивОписаний, "СброситьПароль", ИмяМодуля() + ".СброситьПароль:НаСервере", "Сбросить пароль", "ГруппаКнопкиСменаПароля");
		
		А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, "СохраняемоеЗначениеПароля", "Строка", , "Сохраняемое значение пароля", "ГруппаСменаПароля");
		А1Э_Формы.ДобавитьОписаниеКомандыИКнопки2(МассивОписаний, "УстановитьСохраняемоеЗначениеПароля", ИмяМодуля() + ".УстановитьСохраняемоеЗначениеПароля:НаСервере", "Установить сохраняемое значение пароля", "ГруппаСменаПароля");
		А1Э_Формы.ДобавитьОписаниеТаблицыФормы(МассивОписаний, "Роли", "Назначена:Булево,Имя:Строка,Синоним:Строка", , , , А1Э_Структуры.Создать(
		"ИзменятьСоставСтрок", Ложь,
		"ИзменятьПорядокСтрок", Ложь,
		));
		А1Э_УниверсальнаяФорма.ДобавитьРеквизитыИЭлементы(Форма, МассивОписаний);
		Форма.Элементы.РолиИмя.Видимость = Ложь;
		Форма.Элементы.РолиСиноним.Заголовок = "Роль";
		Форма.Элементы.РолиСиноним.ТолькоПросмотр = Истина;
		Для Каждого Роль Из Метаданные.Роли Цикл
			Строка = Форма.Роли.Добавить();
			Строка.Имя = Роль.Имя;
			Строка.Синоним = Роль.Синоним;
		КонецЦикла;
		Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
			Форма.Элементы.РолиИмя.Видимость = Ложь;
			Форма.Элементы.ГруппаСменаПароля.Видимость = Ложь;
		Иначе
			ПользовательИБ = ПользовательИБ(Форма.Объект.А1Пользователи_ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда
				Для Каждого Роль Из ПользовательИБ.Роли Цикл
					Строки = Форма.Роли.НайтиСтроки(Новый Структура("Имя", Роль.Имя));
					Строки[0].Назначена = Истина;
				КонецЦикла;
				Форма.СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля;
			КонецЕсли;
		КонецЕсли;
	КонецФункции
	
	Функция ФормаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
		ПользовательИБ = ПользовательИБ(ТекущийОбъект.А1Пользователи_ИдентификаторПользователяИБ);
		ПользовательИБ.Роли.Очистить();
		Для Каждого Строка Из Форма.Роли Цикл
			Если Не Строка.Назначена Тогда Продолжить; КонецЕсли;
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[Строка.Имя]);
		КонецЦикла;
		ПользовательИБ.Записать();
	КонецФункции 
	
#КонецЕсли
#Если Клиент Тогда
	
	Функция НаименованиеОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Форма.Объект.А1Пользователи_ИмяДляВхода) Тогда
			Если Форма.Объект.А1Пользователи_ИмяДляВхода = ИмяДляВходаПоУмолчанию(Форма.Объект.Наименование) Тогда
				Форма.Объект.А1Пользователи_ИмяДляВхода = ИмяДляВходаПоУмолчанию(Текст);
			КонецЕсли;
		Иначе
			Форма.Объект.А1Пользователи_ИмяДляВхода = ИмяДляВходаПоУмолчанию(Текст);
		КонецЕсли;
		Форма.Объект.Наименование = Текст;
	КонецФункции
	
	Функция ПриНачалеРаботыСистемы() Экспорт
		Если А1Э_ОбщееСервер.РезультатФункции(ИмяМодуля() + ".НужноСменитьПароль") Тогда
			А1Э_УниверсальнаяФорма.Открыть("Для продолжения работы смените пароль", ИмяМодуля() + ".ФормаСменыПароля__ПриСозданииНаСервере", , , , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;	
	КонецФункции 
	
#КонецЕсли
#КонецОбласти

#Область КомандыФормы
#Если НЕ Клиент Тогда
	Функция УстановитьПароль(Форма, ИмяКоманды) Экспорт
		ПользовательИБ = ПользовательИБ(Форма.Объект.А1Пользователи_ИдентификаторПользователяИБ);
		Если ТипЗнч(ПользовательИБ) <> Тип("ПользовательИнформационнойБазы") Тогда
			Сообщить("Отсутствует пользователь информационной базы!");
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Форма.Пароль) Тогда
			Сообщить("Укажите новый пароль!");
			Возврат Неопределено;
		КонецЕсли;
		Если Форма.Пароль <> Форма.ПодтверждениеПароля Тогда
			Сообщить("Введенные пароли не совпадают!");
			Возврат Неопределено;
		КонецЕсли;
		ПользовательИБ.Пароль = Форма.Пароль;
		ПользовательИБ.Записать();
	КонецФункции
	
	Функция УстановитьСохраняемоеЗначениеПароля(Форма, ИмяКоманды) Экспорт
		ПользовательИБ = ПользовательИБ(Форма.Объект.А1Пользователи_ИдентификаторПользователяИБ);
		Если ТипЗнч(ПользовательИБ) <> Тип("ПользовательИнформационнойБазы") Тогда
			Сообщить("Отсутствует пользователь информационной базы!");
			Возврат Неопределено;
		КонецЕсли;

		ПользовательИБ.СохраняемоеЗначениеПароля = Форма.СохраняемоеЗначениеПароля;
		ПользовательИБ.Записать();

	КонецФункции
	
	Функция СброситьПароль(Форма, ИмяКоманды) Экспорт
		ПользовательИБ = ПользовательИБ(Форма.Объект.А1Пользователи_ИдентификаторПользователяИБ);
		Если ТипЗнч(ПользовательИБ) <> Тип("ПользовательИнформационнойБазы") Тогда
			Сообщить("Отсутствует пользователь информационной базы!");
			Возврат Неопределено;
		КонецЕсли;
		ПользовательИБ.Пароль = "";
		ПользовательИБ.Записать();
	КонецФункции
	
#Иначе
	
	//ТУДУ: сделать диалоговое окно если происходит попытка установки пустого пароля.	
#КонецЕсли
#КонецОбласти

#Область ФормаСменыПароля
#Если НЕ Клиент Тогда
	
	Функция ФормаСменыПароля__ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
		МассивОписаний = Новый Массив;
		А1Э_Формы.ДобавитьОписаниеДекорации(МассивОписаний, "Предупреждение", "Придумайте новый пароль, введите его два раза в поля ниже и нажмите кнопку ""Изменить пароль"". Закрытие этой формы иным способом приведет к завершению работы системы.");
		А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, "Пароль1", "Строка", , "Введите пароль", , , А1Э_Структуры.Создать(
		"РежимПароля", Истина,
		));
		А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, "Пароль2", "Строка", , "Подтвердите пароль", , , А1Э_Структуры.Создать(
		"РежимПароля", Истина,
		));
		А1Э_Формы.ДобавитьОписаниеРеквизита(МассивОписаний, "ПарольИзменен", "Булево");
		А1Э_Формы.ДобавитьОписаниеКомандыИКнопки2(МассивОписаний, "ИзменитьПароль", ИмяМодуля() + ".ФормаСменыПароля__ИзменитьПароль", "Изменить пароль", , , , А1Э_Структуры.Создать(
		"ФормаПриЗакрытии", ИмяМодуля() + ".ФормаСменыПароля__ФормаПриЗакрытии",
		));
		А1Э_УниверсальнаяФорма.ДобавитьРеквизитыИЭлементы(Форма, МассивОписаний);
		Форма.Элементы.ФормаКоманднаяПанель.Видимость = Ложь;
	КонецФункции 
	
#КонецЕсли
#Если Клиент Тогда
	
	Функция ФормаСменыПароля__ФормаПриЗакрытии(ИмяКомпонента, Форма, ЗавершениеРаботы) Экспорт
		Если НЕ Форма.ПарольИзменен Тогда
			ЗавершитьРаботуСистемы();
		КонецЕсли;
	КонецФункции 
	
	Функция ФормаСменыПароля__ИзменитьПароль(Форма, Команда) Экспорт 
		Если Форма.Пароль1 <> Форма.Пароль2 Тогда
			Сообщить("Введенные пароли не совпадают!");
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Форма.Пароль1) Тогда
			Сообщить("Пароль не может быть пустым!");
			Возврат Неопределено;
		КонецЕсли;
		А1Э_ОбщееСервер.РезультатФункции(ИмяМодуля() + ".СменитьПарольПриВходе", Неопределено, Форма.Пароль1);
		Форма.ПарольИзменен = Истина;
		Форма.Закрыть();
	КонецФункции
	
#КонецЕсли
  
#КонецОбласти 

#Область Служебно 
#Если НЕ Клиент Тогда
	
	Функция НужноСменитьПароль(Знач Пользователь = Неопределено) Экспорт
		Если Пользователь = Неопределено Тогда
			Пользователь = Текущий();
		КонецЕсли;
		Если Пользователь = Текущий() Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		Возврат Пользователь.А1Пользователи_ТребоватьИзменениеПароляПриВходеВСистему;
	КонецФункции 
	
	Функция СменитьПарольПриВходе(Пользователь = Неопределено, НовыйПароль) Экспорт
		Если Пользователь = Неопределено Тогда
			Пользователь = Текущий();
		КонецЕсли;
		Если Пользователь = Текущий() Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		НачатьТранзакцию();
		ПользовательИБ = ПользовательИБ(Пользователь);
		ПользовательИБ.Пароль = НовыйПароль;
		ПользовательИБ.Записать();
		ПользовательОбъект = Пользователь.ПолучитьОбъект();
		ПользовательОбъект.А1Пользователи_ТребоватьИзменениеПароляПриВходеВСистему = Ложь;
		ПользовательОбъект.Записать();
		ЗафиксироватьТранзакцию();
	КонецФункции 
	
#КонецЕсли
 
Функция ИмяДляВходаПоУмолчанию(Наименование) Экспорт
		МассивЧастей = СтрРазделить(Наименование, " ", Ложь);
		ПерваяЧасть = МассивЧастей[0];
		МассивЧастей.Удалить(0);
		Для Сч = 0 По МассивЧастей.Количество() - 1 Цикл
			МассивЧастей[Сч] = Лев(МассивЧастей[Сч], 1);
		КонецЦикла;
		ИмяДляВходаПоУмолчанию = ПерваяЧасть + СтрСоединить(МассивЧастей, "");
		Возврат ИмяДляВходаПоУмолчанию;
	КонецФункции 

#КонецОбласти

Функция ИмяМодуля() Экспорт
	Возврат "А1Пользователи";
КонецФункции 